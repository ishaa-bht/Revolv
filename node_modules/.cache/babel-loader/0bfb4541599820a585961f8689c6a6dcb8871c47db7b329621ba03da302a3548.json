{"ast":null,"code":"var _jsxFileName = \"D:\\\\CodeYatra\\\\Final\\\\Revolv\\\\src\\\\components\\\\QueriesPage.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import axios from 'axios';\n// import './QueriesPage.css';\n\n// const QueryPage = () => {\n//     const [formData, setFormData] = useState({\n//         businessName: '',\n//         industry: [],\n//         businessType: [],\n//         businessSize: '',\n//         hasWebsite: '',\n//         sellsOnline: '',\n//         tools: [],\n//         customerInteraction: [],\n//         challenges: []\n//     });\n\n//     const [prediction, setPrediction] = useState(null);\n\n//     const industryOptions = ['Retail', 'Tech', 'Food', 'Finance'];\n//     const businessTypeOptions = ['Retail', 'Service', 'Manufacturing', 'E-commerce', 'Consulting'];\n//     const businessSizeOptions = ['Small', 'Medium', 'Large'];\n//     const binaryOptions = ['Yes', 'No'];\n//     const toolOptions = ['CRM', 'ERP', 'Inventory Management', 'Email Marketing', 'Social Media Management', 'Accounting', 'Analytics'];\n//     const interactionOptions = ['Phone', 'In-store', 'Email', 'Social media', 'Automated chatbots', 'CRM'];\n//     const challengeOptions = ['Marketing', 'Sales', 'Inventory management', 'Customer retention', 'Time management', 'Operational efficiency'];\n\n//     const handleChange = (e) => {\n//         const { name, value, type, checked } = e.target;\n\n//         if (type === 'checkbox') {\n//             setFormData(prev => ({\n//                 ...prev,\n//                 [name]: checked \n//                     ? [...prev[name], value]\n//                     : prev[name].filter(item => item !== value)\n//             }));\n//         } else {\n//             setFormData(prev => ({\n//                 ...prev,\n//                 [name]: value\n//             }));\n//         }\n//     };\n\n//     const handleSubmit = async (e) => {\n//         e.preventDefault();\n\n//         try {\n//             console.log('Form data:', formData);\n//             const response = await axios.post('http://127.0.0.1:5000/predict', formData);\n//             setPrediction(response.data.recommended_tools);\n//         } catch (error) {\n//             console.error('Error fetching prediction:', error);\n//         }\n//     };\n\n//     const renderCheckboxGroup = (name, options) => (\n//         <div className=\"checkbox-group\">\n//             {options.map(option => (\n//                 <label key={option} className=\"checkbox-label\">\n//                     <input\n//                         type=\"checkbox\"\n//                         name={name}\n//                         value={option}\n//                         checked={formData[name].includes(option)}\n//                         onChange={handleChange}\n//                     />\n//                     {option}\n//                 </label>\n//             ))}\n//         </div>\n//     );\n\n//     const renderRadioGroup = (name, options) => (\n//         <div className=\"radio-group\">\n//             {options.map(option => (\n//                 <label key={option} className=\"radio-label\">\n//                     <input\n//                         type=\"radio\"\n//                         name={name}\n//                         value={option}\n//                         checked={formData[name] === option}\n//                         onChange={handleChange}\n//                     />\n//                     {option}\n//                 </label>\n//             ))}\n//         </div>\n//     );\n\n//     return (\n//         <div className=\"query-container\">\n//             <form onSubmit={handleSubmit} className=\"query-form\">\n//                 <h1>Business Profile Questionnaire</h1>\n\n//                 <div className=\"form-group\">\n//                     <label>Business Name</label>\n//                     <input\n//                         type=\"text\"\n//                         name=\"businessName\"\n//                         value={formData.businessName}\n//                         onChange={handleChange}\n//                         className=\"text-input\"\n//                         required\n//                     />\n//                 </div>\n\n//                 <div className=\"form-group\">\n//                     <label>Select your industry:</label>\n//                     {renderCheckboxGroup('industry', industryOptions)}\n//                 </div>\n\n//                 <div className=\"form-group\">\n//                     <label>Select your business type:</label>\n//                     {renderCheckboxGroup('businessType', businessTypeOptions)}\n//                 </div>\n\n//                 <div className=\"form-group\">\n//                     <label>What is the size of your business?</label>\n//                     {renderRadioGroup('businessSize', businessSizeOptions)}\n//                 </div>\n\n//                 <div className=\"form-group\">\n//                     <label>Do you have a website for your business?</label>\n//                     {renderRadioGroup('hasWebsite', binaryOptions)}\n//                 </div>\n\n//                 <div className=\"form-group\">\n//                     <label>Do you sell products/services online?</label>\n//                     {renderRadioGroup('sellsOnline', binaryOptions)}\n//                 </div>\n\n//                 <div className=\"form-group\">\n//                     <label>Which tools do you currently use?</label>\n//                     {renderCheckboxGroup('tools', toolOptions)}\n//                 </div>\n\n//                 <div className=\"form-group\">\n//                     <label>How do you interact with your customers?</label>\n//                     {renderCheckboxGroup('customerInteraction', interactionOptions)}\n//                 </div>\n\n//                 <div className=\"form-group\">\n//                     <label>What are the major challenges your business faces?</label>\n//                     {renderCheckboxGroup('challenges', challengeOptions)}\n//                 </div>\n\n//                 <button type=\"submit\" className=\"submit-button\">Submit</button>\n//             </form>\n\n//             {prediction && (\n//                 <div className=\"prediction-results\">\n//                     <h2>Recommended Tools:</h2>\n//                     <ul>\n//                         {prediction.map((tool, index) => (\n//                             <li key={index}>{tool}</li>\n//                         ))}\n//                     </ul>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default QueryPage;\n\n// QueriesPage.js\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport './QueriesPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QueryPage = () => {\n  _s();\n  const navigate = useNavigate();\n  const [formData, setFormData] = useState({\n    businessName: '',\n    industry: [],\n    businessType: [],\n    businessSize: '',\n    hasWebsite: '',\n    sellsOnline: '',\n    tools: [],\n    customerInteraction: [],\n    challenges: []\n  });\n  const industryOptions = ['Retail', 'Tech', 'Food', 'Finance'];\n  const businessTypeOptions = ['Retail', 'Service', 'Manufacturing', 'E-commerce', 'Consulting'];\n  const businessSizeOptions = ['Small', 'Medium', 'Large'];\n  const binaryOptions = ['Yes', 'No'];\n  const toolOptions = ['CRM', 'ERP', 'Inventory Management', 'Email Marketing', 'Social Media Management', 'Accounting', 'Analytics'];\n  const interactionOptions = ['Phone', 'In-store', 'Email', 'Social media', 'Automated chatbots', 'CRM'];\n  const challengeOptions = ['Marketing', 'Sales', 'Inventory management', 'Customer retention', 'Time management', 'Operational efficiency'];\n  const handleChange = e => {\n    const {\n      name,\n      value,\n      type,\n      checked\n    } = e.target;\n    if (type === 'checkbox') {\n      setFormData(prev => ({\n        ...prev,\n        [name]: checked ? [...prev[name], value] : prev[name].filter(item => item !== value)\n      }));\n    } else {\n      setFormData(prev => ({\n        ...prev,\n        [name]: value\n      }));\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const response = await axios.post('http://127.0.0.1:5000/predict', formData);\n      // Navigate to results page with the prediction data\n      navigate('/results', {\n        state: {\n          prediction: response.data.recommended_tools,\n          businessName: formData.businessName\n        }\n      });\n    } catch (error) {\n      console.error('Error fetching prediction:', error);\n    }\n  };\n  const renderCheckboxGroup = (name, options) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"checkbox-group\",\n    children: options.map(option => /*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"checkbox-label\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        name: name,\n        value: option,\n        checked: formData[name].includes(option),\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 21\n      }, this), option]\n    }, option, true, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 233,\n    columnNumber: 9\n  }, this);\n  const renderRadioGroup = (name, options) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"radio-group\",\n    children: options.map(option => /*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"radio-label\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"radio\",\n        name: name,\n        value: option,\n        checked: formData[name] === option,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 21\n      }, this), option]\n    }, option, true, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 250,\n    columnNumber: 9\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"query-container\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"query-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Business Profile Questionnaire\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Business Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"businessName\",\n          value: formData.businessName,\n          onChange: handleChange,\n          className: \"text-input\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Select your industry:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 21\n        }, this), renderCheckboxGroup('industry', industryOptions)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Select your business type:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 21\n        }, this), renderCheckboxGroup('businessType', businessTypeOptions)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"What is the size of your business?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 21\n        }, this), renderRadioGroup('businessSize', businessSizeOptions)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Do you have a website for your business?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 21\n        }, this), renderRadioGroup('hasWebsite', binaryOptions)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Do you sell products/services online?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 21\n        }, this), renderRadioGroup('sellsOnline', binaryOptions)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Which tools do you currently use?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 21\n        }, this), renderCheckboxGroup('tools', toolOptions)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"How do you interact with your customers?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 21\n        }, this), renderCheckboxGroup('customerInteraction', interactionOptions)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"What are the major challenges your business faces?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 21\n        }, this), renderCheckboxGroup('challenges', challengeOptions)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"submit-button\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 267,\n    columnNumber: 9\n  }, this);\n};\n_s(QueryPage, \"P4YZFWndmMYV+oKtb27SWcoA938=\", false, function () {\n  return [useNavigate];\n});\n_c = QueryPage;\nexport default QueryPage;\nvar _c;\n$RefreshReg$(_c, \"QueryPage\");","map":{"version":3,"names":["React","useState","useNavigate","axios","jsxDEV","_jsxDEV","QueryPage","_s","navigate","formData","setFormData","businessName","industry","businessType","businessSize","hasWebsite","sellsOnline","tools","customerInteraction","challenges","industryOptions","businessTypeOptions","businessSizeOptions","binaryOptions","toolOptions","interactionOptions","challengeOptions","handleChange","e","name","value","type","checked","target","prev","filter","item","handleSubmit","preventDefault","response","post","state","prediction","data","recommended_tools","error","console","renderCheckboxGroup","options","className","children","map","option","includes","onChange","fileName","_jsxFileName","lineNumber","columnNumber","renderRadioGroup","onSubmit","required","_c","$RefreshReg$"],"sources":["D:/CodeYatra/Final/Revolv/src/components/QueriesPage.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import axios from 'axios';\r\n// import './QueriesPage.css';\r\n\r\n// const QueryPage = () => {\r\n//     const [formData, setFormData] = useState({\r\n//         businessName: '',\r\n//         industry: [],\r\n//         businessType: [],\r\n//         businessSize: '',\r\n//         hasWebsite: '',\r\n//         sellsOnline: '',\r\n//         tools: [],\r\n//         customerInteraction: [],\r\n//         challenges: []\r\n//     });\r\n\r\n//     const [prediction, setPrediction] = useState(null);\r\n\r\n//     const industryOptions = ['Retail', 'Tech', 'Food', 'Finance'];\r\n//     const businessTypeOptions = ['Retail', 'Service', 'Manufacturing', 'E-commerce', 'Consulting'];\r\n//     const businessSizeOptions = ['Small', 'Medium', 'Large'];\r\n//     const binaryOptions = ['Yes', 'No'];\r\n//     const toolOptions = ['CRM', 'ERP', 'Inventory Management', 'Email Marketing', 'Social Media Management', 'Accounting', 'Analytics'];\r\n//     const interactionOptions = ['Phone', 'In-store', 'Email', 'Social media', 'Automated chatbots', 'CRM'];\r\n//     const challengeOptions = ['Marketing', 'Sales', 'Inventory management', 'Customer retention', 'Time management', 'Operational efficiency'];\r\n\r\n//     const handleChange = (e) => {\r\n//         const { name, value, type, checked } = e.target;\r\n        \r\n//         if (type === 'checkbox') {\r\n//             setFormData(prev => ({\r\n//                 ...prev,\r\n//                 [name]: checked \r\n//                     ? [...prev[name], value]\r\n//                     : prev[name].filter(item => item !== value)\r\n//             }));\r\n//         } else {\r\n//             setFormData(prev => ({\r\n//                 ...prev,\r\n//                 [name]: value\r\n//             }));\r\n//         }\r\n//     };\r\n\r\n//     const handleSubmit = async (e) => {\r\n//         e.preventDefault();\r\n\r\n//         try {\r\n//             console.log('Form data:', formData);\r\n//             const response = await axios.post('http://127.0.0.1:5000/predict', formData);\r\n//             setPrediction(response.data.recommended_tools);\r\n//         } catch (error) {\r\n//             console.error('Error fetching prediction:', error);\r\n//         }\r\n//     };\r\n\r\n//     const renderCheckboxGroup = (name, options) => (\r\n//         <div className=\"checkbox-group\">\r\n//             {options.map(option => (\r\n//                 <label key={option} className=\"checkbox-label\">\r\n//                     <input\r\n//                         type=\"checkbox\"\r\n//                         name={name}\r\n//                         value={option}\r\n//                         checked={formData[name].includes(option)}\r\n//                         onChange={handleChange}\r\n//                     />\r\n//                     {option}\r\n//                 </label>\r\n//             ))}\r\n//         </div>\r\n//     );\r\n\r\n//     const renderRadioGroup = (name, options) => (\r\n//         <div className=\"radio-group\">\r\n//             {options.map(option => (\r\n//                 <label key={option} className=\"radio-label\">\r\n//                     <input\r\n//                         type=\"radio\"\r\n//                         name={name}\r\n//                         value={option}\r\n//                         checked={formData[name] === option}\r\n//                         onChange={handleChange}\r\n//                     />\r\n//                     {option}\r\n//                 </label>\r\n//             ))}\r\n//         </div>\r\n//     );\r\n\r\n//     return (\r\n//         <div className=\"query-container\">\r\n//             <form onSubmit={handleSubmit} className=\"query-form\">\r\n//                 <h1>Business Profile Questionnaire</h1>\r\n\r\n//                 <div className=\"form-group\">\r\n//                     <label>Business Name</label>\r\n//                     <input\r\n//                         type=\"text\"\r\n//                         name=\"businessName\"\r\n//                         value={formData.businessName}\r\n//                         onChange={handleChange}\r\n//                         className=\"text-input\"\r\n//                         required\r\n//                     />\r\n//                 </div>\r\n\r\n//                 <div className=\"form-group\">\r\n//                     <label>Select your industry:</label>\r\n//                     {renderCheckboxGroup('industry', industryOptions)}\r\n//                 </div>\r\n\r\n//                 <div className=\"form-group\">\r\n//                     <label>Select your business type:</label>\r\n//                     {renderCheckboxGroup('businessType', businessTypeOptions)}\r\n//                 </div>\r\n\r\n//                 <div className=\"form-group\">\r\n//                     <label>What is the size of your business?</label>\r\n//                     {renderRadioGroup('businessSize', businessSizeOptions)}\r\n//                 </div>\r\n\r\n//                 <div className=\"form-group\">\r\n//                     <label>Do you have a website for your business?</label>\r\n//                     {renderRadioGroup('hasWebsite', binaryOptions)}\r\n//                 </div>\r\n\r\n//                 <div className=\"form-group\">\r\n//                     <label>Do you sell products/services online?</label>\r\n//                     {renderRadioGroup('sellsOnline', binaryOptions)}\r\n//                 </div>\r\n\r\n//                 <div className=\"form-group\">\r\n//                     <label>Which tools do you currently use?</label>\r\n//                     {renderCheckboxGroup('tools', toolOptions)}\r\n//                 </div>\r\n\r\n//                 <div className=\"form-group\">\r\n//                     <label>How do you interact with your customers?</label>\r\n//                     {renderCheckboxGroup('customerInteraction', interactionOptions)}\r\n//                 </div>\r\n\r\n//                 <div className=\"form-group\">\r\n//                     <label>What are the major challenges your business faces?</label>\r\n//                     {renderCheckboxGroup('challenges', challengeOptions)}\r\n//                 </div>\r\n\r\n//                 <button type=\"submit\" className=\"submit-button\">Submit</button>\r\n//             </form>\r\n\r\n//             {prediction && (\r\n//                 <div className=\"prediction-results\">\r\n//                     <h2>Recommended Tools:</h2>\r\n//                     <ul>\r\n//                         {prediction.map((tool, index) => (\r\n//                             <li key={index}>{tool}</li>\r\n//                         ))}\r\n//                     </ul>\r\n//                 </div>\r\n//             )}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default QueryPage;\r\n\r\n\r\n// QueriesPage.js\r\nimport React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport './QueriesPage.css';\r\n\r\nconst QueryPage = () => {\r\n    const navigate = useNavigate();\r\n    const [formData, setFormData] = useState({\r\n        businessName: '',\r\n        industry: [],\r\n        businessType: [],\r\n        businessSize: '',\r\n        hasWebsite: '',\r\n        sellsOnline: '',\r\n        tools: [],\r\n        customerInteraction: [],\r\n        challenges: []\r\n    });\r\n\r\n    const industryOptions = ['Retail', 'Tech', 'Food', 'Finance'];\r\n    const businessTypeOptions = ['Retail', 'Service', 'Manufacturing', 'E-commerce', 'Consulting'];\r\n    const businessSizeOptions = ['Small', 'Medium', 'Large'];\r\n    const binaryOptions = ['Yes', 'No'];\r\n    const toolOptions = ['CRM', 'ERP', 'Inventory Management', 'Email Marketing', 'Social Media Management', 'Accounting', 'Analytics'];\r\n    const interactionOptions = ['Phone', 'In-store', 'Email', 'Social media', 'Automated chatbots', 'CRM'];\r\n    const challengeOptions = ['Marketing', 'Sales', 'Inventory management', 'Customer retention', 'Time management', 'Operational efficiency'];\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value, type, checked } = e.target;\r\n        \r\n        if (type === 'checkbox') {\r\n            setFormData(prev => ({\r\n                ...prev,\r\n                [name]: checked \r\n                    ? [...prev[name], value]\r\n                    : prev[name].filter(item => item !== value)\r\n            }));\r\n        } else {\r\n            setFormData(prev => ({\r\n                ...prev,\r\n                [name]: value\r\n            }));\r\n        }\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        try {\r\n            const response = await axios.post('http://127.0.0.1:5000/predict', formData);\r\n            // Navigate to results page with the prediction data\r\n            navigate('/results', { \r\n                state: { \r\n                    prediction: response.data.recommended_tools,\r\n                    businessName: formData.businessName \r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.error('Error fetching prediction:', error);\r\n        }\r\n    };\r\n\r\n    const renderCheckboxGroup = (name, options) => (\r\n        <div className=\"checkbox-group\">\r\n            {options.map(option => (\r\n                <label key={option} className=\"checkbox-label\">\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        name={name}\r\n                        value={option}\r\n                        checked={formData[name].includes(option)}\r\n                        onChange={handleChange}\r\n                    />\r\n                    {option}\r\n                </label>\r\n            ))}\r\n        </div>\r\n    );\r\n\r\n    const renderRadioGroup = (name, options) => (\r\n        <div className=\"radio-group\">\r\n            {options.map(option => (\r\n                <label key={option} className=\"radio-label\">\r\n                    <input\r\n                        type=\"radio\"\r\n                        name={name}\r\n                        value={option}\r\n                        checked={formData[name] === option}\r\n                        onChange={handleChange}\r\n                    />\r\n                    {option}\r\n                </label>\r\n            ))}\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div className=\"query-container\">\r\n            <form onSubmit={handleSubmit} className=\"query-form\">\r\n                <h1>Business Profile Questionnaire</h1>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Business Name</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"businessName\"\r\n                        value={formData.businessName}\r\n                        onChange={handleChange}\r\n                        className=\"text-input\"\r\n                        required\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Select your industry:</label>\r\n                    {renderCheckboxGroup('industry', industryOptions)}\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Select your business type:</label>\r\n                    {renderCheckboxGroup('businessType', businessTypeOptions)}\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>What is the size of your business?</label>\r\n                    {renderRadioGroup('businessSize', businessSizeOptions)}\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Do you have a website for your business?</label>\r\n                    {renderRadioGroup('hasWebsite', binaryOptions)}\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Do you sell products/services online?</label>\r\n                    {renderRadioGroup('sellsOnline', binaryOptions)}\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Which tools do you currently use?</label>\r\n                    {renderCheckboxGroup('tools', toolOptions)}\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>How do you interact with your customers?</label>\r\n                    {renderCheckboxGroup('customerInteraction', interactionOptions)}\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>What are the major challenges your business faces?</label>\r\n                    {renderCheckboxGroup('challenges', challengeOptions)}\r\n                </div>\r\n\r\n                <button type=\"submit\" className=\"submit-button\">Submit</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default QueryPage;"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAMC,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC;IACrCU,YAAY,EAAE,EAAE;IAChBC,QAAQ,EAAE,EAAE;IACZC,YAAY,EAAE,EAAE;IAChBC,YAAY,EAAE,EAAE;IAChBC,UAAU,EAAE,EAAE;IACdC,WAAW,EAAE,EAAE;IACfC,KAAK,EAAE,EAAE;IACTC,mBAAmB,EAAE,EAAE;IA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}