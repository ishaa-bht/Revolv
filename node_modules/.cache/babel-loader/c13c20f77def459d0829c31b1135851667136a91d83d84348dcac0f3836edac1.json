{"ast":null,"code":"import _objectSpread from\"D:/Revolv/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// import React, { useState } from 'react';\n// import axios from 'axios';\n// import './QueriesPage.css';\n// const QueryPage = () => {\n//     const [formData, setFormData] = useState({\n//         businessName: '',\n//         industry: [],\n//         businessType: [],\n//         businessSize: '',\n//         hasWebsite: '',\n//         sellsOnline: '',\n//         tools: [],\n//         customerInteraction: [],\n//         challenges: []\n//     });\n//     const [prediction, setPrediction] = useState(null);\n//     const industryOptions = ['Retail', 'Tech', 'Food', 'Finance'];\n//     const businessTypeOptions = ['Retail', 'Service', 'Manufacturing', 'E-commerce', 'Consulting'];\n//     const businessSizeOptions = ['Small', 'Medium', 'Large'];\n//     const binaryOptions = ['Yes', 'No'];\n//     const toolOptions = ['CRM', 'ERP', 'Inventory Management', 'Email Marketing', 'Social Media Management', 'Accounting', 'Analytics'];\n//     const interactionOptions = ['Phone', 'In-store', 'Email', 'Social media', 'Automated chatbots', 'CRM'];\n//     const challengeOptions = ['Marketing', 'Sales', 'Inventory management', 'Customer retention', 'Time management', 'Operational efficiency'];\n//     const handleChange = (e) => {\n//         const { name, value, type, checked } = e.target;\n//         if (type === 'checkbox') {\n//             setFormData(prev => ({\n//                 ...prev,\n//                 [name]: checked \n//                     ? [...prev[name], value]\n//                     : prev[name].filter(item => item !== value)\n//             }));\n//         } else {\n//             setFormData(prev => ({\n//                 ...prev,\n//                 [name]: value\n//             }));\n//         }\n//     };\n//     const handleSubmit = async (e) => {\n//         e.preventDefault();\n//         try {\n//             console.log('Form data:', formData);\n//             const response = await axios.post('http://127.0.0.1:5000/predict', formData);\n//             setPrediction(response.data.recommended_tools);\n//         } catch (error) {\n//             console.error('Error fetching prediction:', error);\n//         }\n//     };\n//     const renderCheckboxGroup = (name, options) => (\n//         <div className=\"checkbox-group\">\n//             {options.map(option => (\n//                 <label key={option} className=\"checkbox-label\">\n//                     <input\n//                         type=\"checkbox\"\n//                         name={name}\n//                         value={option}\n//                         checked={formData[name].includes(option)}\n//                         onChange={handleChange}\n//                     />\n//                     {option}\n//                 </label>\n//             ))}\n//         </div>\n//     );\n//     const renderRadioGroup = (name, options) => (\n//         <div className=\"radio-group\">\n//             {options.map(option => (\n//                 <label key={option} className=\"radio-label\">\n//                     <input\n//                         type=\"radio\"\n//                         name={name}\n//                         value={option}\n//                         checked={formData[name] === option}\n//                         onChange={handleChange}\n//                     />\n//                     {option}\n//                 </label>\n//             ))}\n//         </div>\n//     );\n//     return (\n//         <div className=\"query-container\">\n//             <form onSubmit={handleSubmit} className=\"query-form\">\n//                 <h1>Business Profile Questionnaire</h1>\n//                 <div className=\"form-group\">\n//                     <label>Business Name</label>\n//                     <input\n//                         type=\"text\"\n//                         name=\"businessName\"\n//                         value={formData.businessName}\n//                         onChange={handleChange}\n//                         className=\"text-input\"\n//                         required\n//                     />\n//                 </div>\n//                 <div className=\"form-group\">\n//                     <label>Select your industry:</label>\n//                     {renderCheckboxGroup('industry', industryOptions)}\n//                 </div>\n//                 <div className=\"form-group\">\n//                     <label>Select your business type:</label>\n//                     {renderCheckboxGroup('businessType', businessTypeOptions)}\n//                 </div>\n//                 <div className=\"form-group\">\n//                     <label>What is the size of your business?</label>\n//                     {renderRadioGroup('businessSize', businessSizeOptions)}\n//                 </div>\n//                 <div className=\"form-group\">\n//                     <label>Do you have a website for your business?</label>\n//                     {renderRadioGroup('hasWebsite', binaryOptions)}\n//                 </div>\n//                 <div className=\"form-group\">\n//                     <label>Do you sell products/services online?</label>\n//                     {renderRadioGroup('sellsOnline', binaryOptions)}\n//                 </div>\n//                 <div className=\"form-group\">\n//                     <label>Which tools do you currently use?</label>\n//                     {renderCheckboxGroup('tools', toolOptions)}\n//                 </div>\n//                 <div className=\"form-group\">\n//                     <label>How do you interact with your customers?</label>\n//                     {renderCheckboxGroup('customerInteraction', interactionOptions)}\n//                 </div>\n//                 <div className=\"form-group\">\n//                     <label>What are the major challenges your business faces?</label>\n//                     {renderCheckboxGroup('challenges', challengeOptions)}\n//                 </div>\n//                 <button type=\"submit\" className=\"submit-button\">Submit</button>\n//             </form>\n//             {prediction && (\n//                 <div className=\"prediction-results\">\n//                     <h2>Recommended Tools:</h2>\n//                     <ul>\n//                         {prediction.map((tool, index) => (\n//                             <li key={index}>{tool}</li>\n//                         ))}\n//                     </ul>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n// export default QueryPage;\n// QueriesPage.js\nimport React,{useState}from'react';import{useNavigate}from'react-router-dom';import axios from'axios';import'./QueriesPage.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const QueryPage=()=>{const navigate=useNavigate();const[formData,setFormData]=useState({businessName:'',industry:[],businessType:[],businessSize:'',hasWebsite:'',sellsOnline:'',tools:[],customerInteraction:[],challenges:[]});const industryOptions=['Retail','Tech','Food','Finance'];const businessTypeOptions=['Retail','Service','Manufacturing','E-commerce','Consulting'];const businessSizeOptions=['Small','Medium','Large'];const binaryOptions=['Yes','No'];const toolOptions=['CRM','ERP','Inventory Management','Email Marketing','Social Media Management','Accounting','Analytics'];const interactionOptions=['Phone','In-store','Email','Social media','Automated chatbots','CRM'];const challengeOptions=['Marketing','Sales','Inventory management','Customer retention','Time management','Operational efficiency'];const handleChange=e=>{const{name,value,type,checked}=e.target;if(type==='checkbox'){setFormData(prev=>_objectSpread(_objectSpread({},prev),{},{[name]:checked?[...prev[name],value]:prev[name].filter(item=>item!==value)}));}else{setFormData(prev=>_objectSpread(_objectSpread({},prev),{},{[name]:value}));}};const handleSubmit=async e=>{e.preventDefault();try{const response=await axios.post('http://127.0.0.1:5000/predict',formData);// Navigate to results page with the prediction data\nnavigate('/results',{state:{prediction:response.data.recommended_tools,businessName:formData.businessName}});}catch(error){console.error('Error fetching prediction:',error);}};const renderCheckboxGroup=(name,options)=>/*#__PURE__*/_jsx(\"div\",{className:\"checkbox-group\",children:options.map(option=>/*#__PURE__*/_jsxs(\"label\",{className:\"checkbox-label\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",name:name,value:option,checked:formData[name].includes(option),onChange:handleChange}),option]},option))});const renderRadioGroup=(name,options)=>/*#__PURE__*/_jsx(\"div\",{className:\"radio-group\",children:options.map(option=>/*#__PURE__*/_jsxs(\"label\",{className:\"radio-label\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"radio\",name:name,value:option,checked:formData[name]===option,onChange:handleChange}),option]},option))});return/*#__PURE__*/_jsx(\"div\",{className:\"query-container\",children:/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,className:\"query-form\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Business Profile Questionnaire\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Business Name\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",name:\"businessName\",value:formData.businessName,onChange:handleChange,className:\"text-input\",required:true})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Select your industry:\"}),renderCheckboxGroup('industry',industryOptions)]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Select your business type:\"}),renderCheckboxGroup('businessType',businessTypeOptions)]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"What is the size of your business?\"}),renderRadioGroup('businessSize',businessSizeOptions)]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Do you have a website for your business?\"}),renderRadioGroup('hasWebsite',binaryOptions)]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Do you sell products/services online?\"}),renderRadioGroup('sellsOnline',binaryOptions)]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Which tools do you currently use?\"}),renderCheckboxGroup('tools',toolOptions)]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"How do you interact with your customers?\"}),renderCheckboxGroup('customerInteraction',interactionOptions)]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"What are the major challenges your business faces?\"}),renderCheckboxGroup('challenges',challengeOptions)]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"submit-button\",children:\"Submit\"})]})});};export default QueryPage;","map":{"version":3,"names":["React","useState","useNavigate","axios","jsx","_jsx","jsxs","_jsxs","QueryPage","navigate","formData","setFormData","businessName","industry","businessType","businessSize","hasWebsite","sellsOnline","tools","customerInteraction","challenges","industryOptions","businessTypeOptions","businessSizeOptions","binaryOptions","toolOptions","interactionOptions","challengeOptions","handleChange","e","name","value","type","checked","target","prev","_objectSpread","filter","item","handleSubmit","preventDefault","response","post","state","prediction","data","recommended_tools","error","console","renderCheckboxGroup","options","className","children","map","option","includes","onChange","renderRadioGroup","onSubmit","required"],"sources":["D:/Revolv/src/components/QueriesPage.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import axios from 'axios';\r\n// import './QueriesPage.css';\r\n\r\n// const QueryPage = () => {\r\n//     const [formData, setFormData] = useState({\r\n//         businessName: '',\r\n//         industry: [],\r\n//         businessType: [],\r\n//         businessSize: '',\r\n//         hasWebsite: '',\r\n//         sellsOnline: '',\r\n//         tools: [],\r\n//         customerInteraction: [],\r\n//         challenges: []\r\n//     });\r\n\r\n//     const [prediction, setPrediction] = useState(null);\r\n\r\n//     const industryOptions = ['Retail', 'Tech', 'Food', 'Finance'];\r\n//     const businessTypeOptions = ['Retail', 'Service', 'Manufacturing', 'E-commerce', 'Consulting'];\r\n//     const businessSizeOptions = ['Small', 'Medium', 'Large'];\r\n//     const binaryOptions = ['Yes', 'No'];\r\n//     const toolOptions = ['CRM', 'ERP', 'Inventory Management', 'Email Marketing', 'Social Media Management', 'Accounting', 'Analytics'];\r\n//     const interactionOptions = ['Phone', 'In-store', 'Email', 'Social media', 'Automated chatbots', 'CRM'];\r\n//     const challengeOptions = ['Marketing', 'Sales', 'Inventory management', 'Customer retention', 'Time management', 'Operational efficiency'];\r\n\r\n//     const handleChange = (e) => {\r\n//         const { name, value, type, checked } = e.target;\r\n        \r\n//         if (type === 'checkbox') {\r\n//             setFormData(prev => ({\r\n//                 ...prev,\r\n//                 [name]: checked \r\n//                     ? [...prev[name], value]\r\n//                     : prev[name].filter(item => item !== value)\r\n//             }));\r\n//         } else {\r\n//             setFormData(prev => ({\r\n//                 ...prev,\r\n//                 [name]: value\r\n//             }));\r\n//         }\r\n//     };\r\n\r\n//     const handleSubmit = async (e) => {\r\n//         e.preventDefault();\r\n\r\n//         try {\r\n//             console.log('Form data:', formData);\r\n//             const response = await axios.post('http://127.0.0.1:5000/predict', formData);\r\n//             setPrediction(response.data.recommended_tools);\r\n//         } catch (error) {\r\n//             console.error('Error fetching prediction:', error);\r\n//         }\r\n//     };\r\n\r\n//     const renderCheckboxGroup = (name, options) => (\r\n//         <div className=\"checkbox-group\">\r\n//             {options.map(option => (\r\n//                 <label key={option} className=\"checkbox-label\">\r\n//                     <input\r\n//                         type=\"checkbox\"\r\n//                         name={name}\r\n//                         value={option}\r\n//                         checked={formData[name].includes(option)}\r\n//                         onChange={handleChange}\r\n//                     />\r\n//                     {option}\r\n//                 </label>\r\n//             ))}\r\n//         </div>\r\n//     );\r\n\r\n//     const renderRadioGroup = (name, options) => (\r\n//         <div className=\"radio-group\">\r\n//             {options.map(option => (\r\n//                 <label key={option} className=\"radio-label\">\r\n//                     <input\r\n//                         type=\"radio\"\r\n//                         name={name}\r\n//                         value={option}\r\n//                         checked={formData[name] === option}\r\n//                         onChange={handleChange}\r\n//                     />\r\n//                     {option}\r\n//                 </label>\r\n//             ))}\r\n//         </div>\r\n//     );\r\n\r\n//     return (\r\n//         <div className=\"query-container\">\r\n//             <form onSubmit={handleSubmit} className=\"query-form\">\r\n//                 <h1>Business Profile Questionnaire</h1>\r\n\r\n//                 <div className=\"form-group\">\r\n//                     <label>Business Name</label>\r\n//                     <input\r\n//                         type=\"text\"\r\n//                         name=\"businessName\"\r\n//                         value={formData.businessName}\r\n//                         onChange={handleChange}\r\n//                         className=\"text-input\"\r\n//                         required\r\n//                     />\r\n//                 </div>\r\n\r\n//                 <div className=\"form-group\">\r\n//                     <label>Select your industry:</label>\r\n//                     {renderCheckboxGroup('industry', industryOptions)}\r\n//                 </div>\r\n\r\n//                 <div className=\"form-group\">\r\n//                     <label>Select your business type:</label>\r\n//                     {renderCheckboxGroup('businessType', businessTypeOptions)}\r\n//                 </div>\r\n\r\n//                 <div className=\"form-group\">\r\n//                     <label>What is the size of your business?</label>\r\n//                     {renderRadioGroup('businessSize', businessSizeOptions)}\r\n//                 </div>\r\n\r\n//                 <div className=\"form-group\">\r\n//                     <label>Do you have a website for your business?</label>\r\n//                     {renderRadioGroup('hasWebsite', binaryOptions)}\r\n//                 </div>\r\n\r\n//                 <div className=\"form-group\">\r\n//                     <label>Do you sell products/services online?</label>\r\n//                     {renderRadioGroup('sellsOnline', binaryOptions)}\r\n//                 </div>\r\n\r\n//                 <div className=\"form-group\">\r\n//                     <label>Which tools do you currently use?</label>\r\n//                     {renderCheckboxGroup('tools', toolOptions)}\r\n//                 </div>\r\n\r\n//                 <div className=\"form-group\">\r\n//                     <label>How do you interact with your customers?</label>\r\n//                     {renderCheckboxGroup('customerInteraction', interactionOptions)}\r\n//                 </div>\r\n\r\n//                 <div className=\"form-group\">\r\n//                     <label>What are the major challenges your business faces?</label>\r\n//                     {renderCheckboxGroup('challenges', challengeOptions)}\r\n//                 </div>\r\n\r\n//                 <button type=\"submit\" className=\"submit-button\">Submit</button>\r\n//             </form>\r\n\r\n//             {prediction && (\r\n//                 <div className=\"prediction-results\">\r\n//                     <h2>Recommended Tools:</h2>\r\n//                     <ul>\r\n//                         {prediction.map((tool, index) => (\r\n//                             <li key={index}>{tool}</li>\r\n//                         ))}\r\n//                     </ul>\r\n//                 </div>\r\n//             )}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default QueryPage;\r\n\r\n\r\n// QueriesPage.js\r\nimport React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport './QueriesPage.css';\r\n\r\nconst QueryPage = () => {\r\n    const navigate = useNavigate();\r\n    const [formData, setFormData] = useState({\r\n        businessName: '',\r\n        industry: [],\r\n        businessType: [],\r\n        businessSize: '',\r\n        hasWebsite: '',\r\n        sellsOnline: '',\r\n        tools: [],\r\n        customerInteraction: [],\r\n        challenges: []\r\n    });\r\n\r\n    const industryOptions = ['Retail', 'Tech', 'Food', 'Finance'];\r\n    const businessTypeOptions = ['Retail', 'Service', 'Manufacturing', 'E-commerce', 'Consulting'];\r\n    const businessSizeOptions = ['Small', 'Medium', 'Large'];\r\n    const binaryOptions = ['Yes', 'No'];\r\n    const toolOptions = ['CRM', 'ERP', 'Inventory Management', 'Email Marketing', 'Social Media Management', 'Accounting', 'Analytics'];\r\n    const interactionOptions = ['Phone', 'In-store', 'Email', 'Social media', 'Automated chatbots', 'CRM'];\r\n    const challengeOptions = ['Marketing', 'Sales', 'Inventory management', 'Customer retention', 'Time management', 'Operational efficiency'];\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value, type, checked } = e.target;\r\n        \r\n        if (type === 'checkbox') {\r\n            setFormData(prev => ({\r\n                ...prev,\r\n                [name]: checked \r\n                    ? [...prev[name], value]\r\n                    : prev[name].filter(item => item !== value)\r\n            }));\r\n        } else {\r\n            setFormData(prev => ({\r\n                ...prev,\r\n                [name]: value\r\n            }));\r\n        }\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        try {\r\n            const response = await axios.post('http://127.0.0.1:5000/predict', formData);\r\n            // Navigate to results page with the prediction data\r\n            navigate('/results', { \r\n                state: { \r\n                    prediction: response.data.recommended_tools,\r\n                    businessName: formData.businessName \r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.error('Error fetching prediction:', error);\r\n        }\r\n    };\r\n\r\n    const renderCheckboxGroup = (name, options) => (\r\n        <div className=\"checkbox-group\">\r\n            {options.map(option => (\r\n                <label key={option} className=\"checkbox-label\">\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        name={name}\r\n                        value={option}\r\n                        checked={formData[name].includes(option)}\r\n                        onChange={handleChange}\r\n                    />\r\n                    {option}\r\n                </label>\r\n            ))}\r\n        </div>\r\n    );\r\n\r\n    const renderRadioGroup = (name, options) => (\r\n        <div className=\"radio-group\">\r\n            {options.map(option => (\r\n                <label key={option} className=\"radio-label\">\r\n                    <input\r\n                        type=\"radio\"\r\n                        name={name}\r\n                        value={option}\r\n                        checked={formData[name] === option}\r\n                        onChange={handleChange}\r\n                    />\r\n                    {option}\r\n                </label>\r\n            ))}\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div className=\"query-container\">\r\n            <form onSubmit={handleSubmit} className=\"query-form\">\r\n                <h1>Business Profile Questionnaire</h1>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Business Name</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"businessName\"\r\n                        value={formData.businessName}\r\n                        onChange={handleChange}\r\n                        className=\"text-input\"\r\n                        required\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Select your industry:</label>\r\n                    {renderCheckboxGroup('industry', industryOptions)}\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Select your business type:</label>\r\n                    {renderCheckboxGroup('businessType', businessTypeOptions)}\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>What is the size of your business?</label>\r\n                    {renderRadioGroup('businessSize', businessSizeOptions)}\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Do you have a website for your business?</label>\r\n                    {renderRadioGroup('hasWebsite', binaryOptions)}\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Do you sell products/services online?</label>\r\n                    {renderRadioGroup('sellsOnline', binaryOptions)}\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Which tools do you currently use?</label>\r\n                    {renderCheckboxGroup('tools', toolOptions)}\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>How do you interact with your customers?</label>\r\n                    {renderCheckboxGroup('customerInteraction', interactionOptions)}\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>What are the major challenges your business faces?</label>\r\n                    {renderCheckboxGroup('challenges', challengeOptions)}\r\n                </div>\r\n\r\n                <button type=\"submit\" className=\"submit-button\">Submit</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default QueryPage;"],"mappingsvC,OAASC,WAAW,KAAQ,kBAAkB,CAC9C,MAAO,CAAAC,KAAK,KAAM,OAAO,CACzB,MAAO,mBAAmB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAE3B,KAAM,CAAAC,SAAS,CAAGA,CAAA,GAAM,CACpB,KAAM,CAAAC,QAAQ,CAAGP,WAAW,CAAC,CAAC,CAC9B,KAAM,CAACQ,QAAQ,CAAEC,WAAW,CAAC,CAAGV,QAAQ,CAAC,CACrCW,YAAY,CAAE,EAAE,CAChBC,QAAQ,CAAE,EAAE,CACZC,YAAY,CAAE,EAAE,CAChBC,YAAY,CAAE,EAAE,CAChBC,UAAU,CAAE,EAAE,CACdC,WAAW,CAAE,EAAE,CACfC,KAAK,CAAE,EAAE,CACTC,mBAAmB,CAAE,EAAE,CACvBC,UAAU,CAAE,EAChB,CAAC,CAAC,CAEF,KAAM,CAAAC,eAAe,CAAG,CAAC,QAAQ,CAAE,MAAM,CAAE,MAAM,CAAE,SAAS,CAAC,CAC7D,KAAM,CAAAC,mBAAmB,CAAG,CAAC,QAAQ,CAAE,SAAS,CAAE,eAAe,CAAE,YAAY,CAAE,YAAY,CAAC,CAC9F,KAAM,CAAAC,mBAAmB,CAAG,CAAC,OAAO,CAAE,QAAQ,CAAE,OAAO,CAAC,CACxD,KAAM,CAAAC,aAAa,CAAG,CAAC,KAAK,CAAE,IAAI,CAAC,CACnC,KAAM,CAAAC,WAAW,CAAG,CAAC,KAAK,CAAE,KAAK,CAAE,sBAAsB,CAAE,iBAAiB,CAAE,yBAAyB,CAAE,YAAY,CAAE,WAAW,CAAC,CACnI,KAAM,CAAAC,kBAAkB,CAAG,CAAC,OAAO,CAAE,UAAU,CAAE,OAAO,CAAE,cAAc,CAAE,oBAAoB,CAAE,KAAK,CAAC,CACtG,KAAM,CAAAC,gBAAgB,CAAG,CAAC,WAAW,CAAE,OAAO,CAAE,sBAAsB,CAAE,oBAAoB,CAAE,iBAAiB,CAAE,wBAAwB,CAAC,CAE1I,KAAM,CAAAC,YAAY,CAAIC,CAAC,EAAK,CACxB,KAAM,CAAEC,IAAI,CAAEC,KAAK,CAAEC,IAAI,CAAEC,OAAQ,CAAC,CAAGJ,CAAC,CAACK,MAAM,CAE/C,GAAIF,IAAI,GAAK,UAAU,CAAE,CACrBrB,WAAW,CAACwB,IAAI,EAAAC,aAAA,CAAAA,aAAA,IACTD,IAAI,MACP,CAACL,IAAI,EAAGG,OAAO,CACT,CAAC,GAAGE,IAAI,CAACL,IAAI,CAAC,CAAEC,KAAK,CAAC,CACtBI,IAAI,CAACL,IAAI,CAAC,CAACO,MAAM,CAACC,IAAI,EAAIA,IAAI,GAAKP,KAAK,CAAC,EACjD,CAAC,CACP,CAAC,IAAM,CACHpB,WAAW,CAACwB,IAAI,EAAAC,aAAA,CAAAA,aAAA,IACTD,IAAI,MACP,CAACL,IAAI,EAAGC,KAAK,EACf,CAAC,CACP,CACJ,CAAC,CAED,KAAM,CAAAQ,YAAY,CAAG,KAAO,CAAAV,CAAC,EAAK,CAC9BA,CAAC,CAACW,cAAc,CAAC,CAAC,CAElB,GAAI,CACA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAtC,KAAK,CAACuC,IAAI,CAAC,+BAA+B,CAAEhC,QAAQ,CAAC,CAC5E;AACAD,QAAQ,CAAC,UAAU,CAAE,CACjBkC,KAAK,CAAE,CACHC,UAAU,CAAEH,QAAQ,CAACI,IAAI,CAACC,iBAAiB,CAC3ClC,YAAY,CAAEF,QAAQ,CAACE,YAC3B,CACJ,CAAC,CAAC,CACN,CAAE,MAAOmC,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,4BAA4B,CAAEA,KAAK,CAAC,CACtD,CACJ,CAAC,CAED,KAAM,CAAAE,mBAAmB,CAAGA,CAACnB,IAAI,CAAEoB,OAAO,gBACtC7C,IAAA,QAAK8C,SAAS,CAAC,gBAAgB,CAAAC,QAAA,CAC1BF,OAAO,CAACG,GAAG,CAACC,MAAM,eACf/C,KAAA,UAAoB4C,SAAS,CAAC,gBAAgB,CAAAC,QAAA,eAC1C/C,IAAA,UACI2B,IAAI,CAAC,UAAU,CACfF,IAAI,CAAEA,IAAK,CACXC,KAAK,CAAEuB,MAAO,CACdrB,OAAO,CAAEvB,QAAQ,CAACoB,IAAI,CAAC,CAACyB,QAAQ,CAACD,MAAM,CAAE,CACzCE,QAAQ,CAAE5B,YAAa,CAC1B,CAAC,CACD0B,MAAM,GARCA,MASL,CACV,CAAC,CACD,CACR,CAED,KAAM,CAAAG,gBAAgB,CAAGA,CAAC3B,IAAI,CAAEoB,OAAO,gBACnC7C,IAAA,QAAK8C,SAAS,CAAC,aAAa,CAAAC,QAAA,CACvBF,OAAO,CAACG,GAAG,CAACC,MAAM,eACf/C,KAAA,UAAoB4C,SAAS,CAAC,aAAa,CAAAC,QAAA,eACvC/C,IAAA,UACI2B,IAAI,CAAC,OAAO,CACZF,IAAI,CAAEA,IAAK,CACXC,KAAK,CAAEuB,MAAO,CACdrB,OAAO,CAAEvB,QAAQ,CAACoB,IAAI,CAAC,GAAKwB,MAAO,CACnCE,QAAQ,CAAE5B,YAAa,CAC1B,CAAC,CACD0B,MAAM,GARCA,MASL,CACV,CAAC,CACD,CACR,CAED,mBACIjD,IAAA,QAAK8C,SAAS,CAAC,iBAAiB,CAAAC,QAAA,cAC5B7C,KAAA,SAAMmD,QAAQ,CAAEnB,YAAa,CAACY,SAAS,CAAC,YAAY,CAAAC,QAAA,eAChD/C,IAAA,OAAA+C,QAAA,CAAI,gCAA8B,CAAI,CAAC,cAEvC7C,KAAA,QAAK4C,SAAS,CAAC,YAAY,CAAAC,QAAA,eACvB/C,IAAA,UAAA+C,QAAA,CAAO,eAAa,CAAO,CAAC,cAC5B/C,IAAA,UACI2B,IAAI,CAAC,MAAM,CACXF,IAAI,CAAC,cAAc,CACnBC,KAAK,CAAErB,QAAQ,CAACE,YAAa,CAC7B4C,QAAQ,CAAE5B,YAAa,CACvBuB,SAAS,CAAC,YAAY,CACtBQ,QAAQ,MACX,CAAC,EACD,CAAC,cAENpD,KAAA,QAAK4C,SAAS,CAAC,YAAY,CAAAC,QAAA,eACvB/C,IAAA,UAAA+C,QAAA,CAAO,uBAAqB,CAAO,CAAC,CACnCH,mBAAmB,CAAC,UAAU,CAAE5B,eAAe,CAAC,EAChD,CAAC,cAENd,KAAA,QAAK4C,SAAS,CAAC,YAAY,CAAAC,QAAA,eACvB/C,IAAA,UAAA+C,QAAA,CAAO,4BAA0B,CAAO,CAAC,CACxCH,mBAAmB,CAAC,cAAc,CAAE3B,mBAAmB,CAAC,EACxD,CAAC,cAENf,KAAA,QAAK4C,SAAS,CAAC,YAAY,CAAAC,QAAA,eACvB/C,IAAA,UAAA+C,QAAA,CAAO,oCAAkC,CAAO,CAAC,CAChDK,gBAAgB,CAAC,cAAc,CAAElC,mBAAmB,CAAC,EACrD,CAAC,cAENhB,KAAA,QAAK4C,SAAS,CAAC,YAAY,CAAAC,QAAA,eACvB/C,IAAA,UAAA+C,QAAA,CAAO,0CAAwC,CAAO,CAAC,CACtDK,gBAAgB,CAAC,YAAY,CAAEjC,aAAa,CAAC,EAC7C,CAAC,cAENjB,KAAA,QAAK4C,SAAS,CAAC,YAAY,CAAAC,QAAA,eACvB/C,IAAA,UAAA+C,QAAA,CAAO,uCAAqC,CAAO,CAAC,CACnDK,gBAAgB,CAAC,aAAa,CAAEjC,aAAa,CAAC,EAC9C,CAAC,cAENjB,KAAA,QAAK4C,SAAS,CAAC,YAAY,CAAAC,QAAA,eACvB/C,IAAA,UAAA+C,QAAA,CAAO,mCAAiC,CAAO,CAAC,CAC/CH,mBAAmB,CAAC,OAAO,CAAExB,WAAW,CAAC,EACzC,CAAC,cAENlB,KAAA,QAAK4C,SAAS,CAAC,YAAY,CAAAC,QAAA,eACvB/C,IAAA,UAAA+C,QAAA,CAAO,0CAAwC,CAAO,CAAC,CACtDH,mBAAmB,CAAC,qBAAqB,CAAEvB,kBAAkB,CAAC,EAC9D,CAAC,cAENnB,KAAA,QAAK4C,SAAS,CAAC,YAAY,CAAAC,QAAA,eACvB/C,IAAA,UAAA+C,QAAA,CAAO,oDAAkD,CAAO,CAAC,CAChEH,mBAAmB,CAAC,YAAY,CAAEtB,gBAAgB,CAAC,EACnD,CAAC,cAENtB,IAAA,WAAQ2B,IAAI,CAAC,QAAQ,CAACmB,SAAS,CAAC,eAAe,CAAAC,QAAA,CAAC,QAAM,CAAQ,CAAC,EAC7D,CAAC,CACN,CAAC,CAEd,CAAC,CAED,cAAe,CAAA5C,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}