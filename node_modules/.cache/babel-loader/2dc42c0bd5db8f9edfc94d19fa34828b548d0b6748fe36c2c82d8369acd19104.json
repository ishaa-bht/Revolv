{"ast":null,"code":"// import React from 'react';\n// import { useLocation } from 'react-router-dom';\n// import './JobListingsPage.css';\n// const JobListingsPage = () => {\n//   const location = useLocation();\n//   const queryParams = new URLSearchParams(location.search);\n//   const jobType = queryParams.get('jobType') || '';\n//   // Sample job listings\n//   const jobs = [\n//     { id: 1, title: 'Social Media Manager', salary: '$50,000', description: 'Manage social media accounts for brands.' },\n//     { id: 2, title: 'Software Developer', salary: '$80,000', description: 'Develop and maintain software applications.' },\n//     { id: 3, title: 'Graphic Designer', salary: '$45,000', description: 'Create visual content for marketing campaigns.' },\n//   ];\n//   // Filter jobs based on the selected job type\n//   const filteredJobs = jobs.filter(job => job.title.toLowerCase().includes(jobType.toLowerCase()));\n//   return (\n//     <div className=\"job-listings-container\">\n//       <h1 className=\"page-header\">Available Jobs</h1>\n//       <div className=\"job-list\">\n//         {filteredJobs.length > 0 ? (\n//           filteredJobs.map(job => (\n//             <div key={job.id} className=\"job-card\">\n//               <h2>{job.title}</h2>\n//               <p><strong>Salary:</strong> {job.salary}</p>\n//               <p>{job.description}</p>\n//               <button className=\"apply-button\">Apply</button>\n//             </div>\n//           ))\n//         ) : (\n//           <p>No jobs found for \"{jobType}\"</p>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n// export default JobListingsPage;\n// import React from 'react';\n// import { useLocation } from 'react-router-dom';\n// import './JobListingsPage.css';\n// const JobListingsPage = () => {\n//   const location = useLocation();\n//   const queryParams = new URLSearchParams(location.search);\n//   const jobType = queryParams.get('jobType') || '';\n//   const jobTime = queryParams.get('jobTime') || '';\n//   const locationPref = queryParams.get('location') || '';\n//   // Sample job listings\n//   const jobs = [\n//     { id: 1, title: 'Social Media Manager', salary: '$50,000', jobTime: 'Full-time', location: 'New York' },\n//     { id: 2, title: 'Software Developer', salary: '$80,000', jobTime: 'Full-time', location: 'San Francisco' },\n//     { id: 3, title: 'Graphic Designer', salary: '$45,000', jobTime: 'Part-time', location: 'Los Angeles' },\n//   ];\n//   // Filter jobs based on user input\n//   const filteredJobs = jobs.filter(\n//     job =>\n//       job.title.toLowerCase().includes(jobType.toLowerCase()) &&\n//       (jobTime ? job.jobTime === jobTime : true) &&\n//       (locationPref ? job.location.toLowerCase().includes(locationPref.toLowerCase()) : true)\n//   );\n//   return (\n//     <div className=\"job-listings-container\">\n//       <h1 className=\"page-header\">Available Jobs</h1>\n//       <div className=\"job-list\">\n//         {filteredJobs.length > 0 ? (\n//           filteredJobs.map(job => (\n//             <div key={job.id} className=\"job-card\">\n//               <h2>{job.title}</h2>\n//               <p><strong>Salary:</strong> {job.salary}</p>\n//               <p><strong>Job Type:</strong> {job.jobTime}</p>\n//               <p><strong>Location:</strong> {job.location}</p>\n//               <button className=\"apply-button\">Apply</button>\n//             </div>\n//           ))\n//         ) : (\n//           <p>No jobs found for \"{jobType}\" in \"{locationPref}\"</p>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n// export default JobListingsPage;\nimport React from'react';import{useLocation}from'react-router-dom';import'./JobListingPage.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const JobListingsPage=()=>{const location=useLocation();const queryParams=new URLSearchParams(location.search);const jobType=queryParams.get('jobType')||'';// Dummy job listings\nconst jobs=[{id:1,title:'Social Media Manager',salary:'$5000',jobType:'Full-time',company:'ABC Appareal',contact:'Hr@abc.com'},{id:2,title:'Social Media Manager',salary:'$5500',jobType:'Freelance',company:'Stanley inc',contact:'contactus@stanly.com'},{id:3,title:'Social Media Manager',salary:'$1500',jobType:'Part-Time',company:'Innotech soultion',contact:'contactus@innotech.com'},{id:4,title:'Social Media Manager',salary:'$4000',jobType:'Full-time',company:'Rivi inc',contact:'contactus@rivi.com'},{id:5,title:'Social Media Manager',salary:'$2000',jobType:'Freelance',company:'Bonum co',contact:'contactus@bonum.com'}];// Filter jobs based on the input type\nconst filteredJobs=jobs.filter(job=>job.title.toLowerCase().includes(jobType.toLowerCase()));return/*#__PURE__*/_jsxs(\"div\",{className:\"job-listings-container\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"page-header\",children:\"Jobs Available\"}),/*#__PURE__*/_jsx(\"div\",{className:\"job-list\",children:filteredJobs.length>0?filteredJobs.map(job=>/*#__PURE__*/_jsxs(\"div\",{className:\"job-card\",children:[/*#__PURE__*/_jsx(\"h2\",{children:job.title}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Salary Offered:\"}),\" \",job.salary]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Job Type:\"}),\" \",job.jobType]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Company Name:\"}),\" \",job.company]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Contact:\"}),\" \",job.contact]}),/*#__PURE__*/_jsx(\"button\",{className:\"apply-button\",children:\"Apply\"})]},job.id)):/*#__PURE__*/_jsxs(\"p\",{children:[\"No jobs found for \\\"\",jobType,\"\\\"\"]})})]});};export default JobListingsPage;","map":{"version":3,"names":["React","useLocation","jsx","_jsx","jsxs","_jsxs","JobListingsPage","location","queryParams","URLSearchParams","search","jobType","get","jobs","id","title","salary","company","contact","filteredJobs","filter","job","toLowerCase","includes","className","children","length","map"],"sources":["D:/Revolv/src/components/JobListingPage.js"],"sourcesContent":["// import React from 'react';\r\n// import { useLocation } from 'react-router-dom';\r\n// import './JobListingsPage.css';\r\n\r\n// const JobListingsPage = () => {\r\n//   const location = useLocation();\r\n//   const queryParams = new URLSearchParams(location.search);\r\n//   const jobType = queryParams.get('jobType') || '';\r\n\r\n//   // Sample job listings\r\n//   const jobs = [\r\n//     { id: 1, title: 'Social Media Manager', salary: '$50,000', description: 'Manage social media accounts for brands.' },\r\n//     { id: 2, title: 'Software Developer', salary: '$80,000', description: 'Develop and maintain software applications.' },\r\n//     { id: 3, title: 'Graphic Designer', salary: '$45,000', description: 'Create visual content for marketing campaigns.' },\r\n//   ];\r\n\r\n//   // Filter jobs based on the selected job type\r\n//   const filteredJobs = jobs.filter(job => job.title.toLowerCase().includes(jobType.toLowerCase()));\r\n\r\n//   return (\r\n//     <div className=\"job-listings-container\">\r\n//       <h1 className=\"page-header\">Available Jobs</h1>\r\n//       <div className=\"job-list\">\r\n//         {filteredJobs.length > 0 ? (\r\n//           filteredJobs.map(job => (\r\n//             <div key={job.id} className=\"job-card\">\r\n//               <h2>{job.title}</h2>\r\n//               <p><strong>Salary:</strong> {job.salary}</p>\r\n//               <p>{job.description}</p>\r\n//               <button className=\"apply-button\">Apply</button>\r\n//             </div>\r\n//           ))\r\n//         ) : (\r\n//           <p>No jobs found for \"{jobType}\"</p>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default JobListingsPage;\r\n\r\n\r\n// import React from 'react';\r\n// import { useLocation } from 'react-router-dom';\r\n// import './JobListingsPage.css';\r\n\r\n// const JobListingsPage = () => {\r\n//   const location = useLocation();\r\n//   const queryParams = new URLSearchParams(location.search);\r\n//   const jobType = queryParams.get('jobType') || '';\r\n//   const jobTime = queryParams.get('jobTime') || '';\r\n//   const locationPref = queryParams.get('location') || '';\r\n\r\n//   // Sample job listings\r\n//   const jobs = [\r\n//     { id: 1, title: 'Social Media Manager', salary: '$50,000', jobTime: 'Full-time', location: 'New York' },\r\n//     { id: 2, title: 'Software Developer', salary: '$80,000', jobTime: 'Full-time', location: 'San Francisco' },\r\n//     { id: 3, title: 'Graphic Designer', salary: '$45,000', jobTime: 'Part-time', location: 'Los Angeles' },\r\n//   ];\r\n\r\n//   // Filter jobs based on user input\r\n//   const filteredJobs = jobs.filter(\r\n//     job =>\r\n//       job.title.toLowerCase().includes(jobType.toLowerCase()) &&\r\n//       (jobTime ? job.jobTime === jobTime : true) &&\r\n//       (locationPref ? job.location.toLowerCase().includes(locationPref.toLowerCase()) : true)\r\n//   );\r\n\r\n//   return (\r\n//     <div className=\"job-listings-container\">\r\n//       <h1 className=\"page-header\">Available Jobs</h1>\r\n//       <div className=\"job-list\">\r\n//         {filteredJobs.length > 0 ? (\r\n//           filteredJobs.map(job => (\r\n//             <div key={job.id} className=\"job-card\">\r\n//               <h2>{job.title}</h2>\r\n//               <p><strong>Salary:</strong> {job.salary}</p>\r\n//               <p><strong>Job Type:</strong> {job.jobTime}</p>\r\n//               <p><strong>Location:</strong> {job.location}</p>\r\n//               <button className=\"apply-button\">Apply</button>\r\n//             </div>\r\n//           ))\r\n//         ) : (\r\n//           <p>No jobs found for \"{jobType}\" in \"{locationPref}\"</p>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default JobListingsPage;\r\n\r\nimport React from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport './JobListingPage.css';\r\n\r\nconst JobListingsPage = () => {\r\n  const location = useLocation();\r\n  const queryParams = new URLSearchParams(location.search);\r\n  const jobType = queryParams.get('jobType') || '';\r\n\r\n  // Dummy job listings\r\n  const jobs = [\r\n    { id: 1, title: 'Social Media Manager', salary: '$5000', jobType: 'Full-time' , company : 'ABC Appareal',contact:'Hr@abc.com' },\r\n    { id: 2, title: 'Social Media Manager', salary: '$5500', jobType: 'Freelance' ,company : 'Stanley inc',contact:'contactus@stanly.com'},\r\n    { id: 3, title: 'Social Media Manager', salary: '$1500', jobType: 'Part-Time' ,company : 'Innotech soultion',contact:'contactus@innotech.com'},\r\n    { id: 4, title: 'Social Media Manager', salary: '$4000', jobType: 'Full-time' ,company : 'Rivi inc',contact:'contactus@rivi.com'},\r\n    { id: 5, title: 'Social Media Manager', salary: '$2000', jobType: 'Freelance' ,company : 'Bonum co',contact:'contactus@bonum.com'},\r\n  ];\r\n\r\n  // Filter jobs based on the input type\r\n  const filteredJobs = jobs.filter(job => job.title.toLowerCase().includes(jobType.toLowerCase()));\r\n\r\n  return (\r\n    <div className=\"job-listings-container\">\r\n      <h1 className=\"page-header\">Jobs Available</h1>\r\n      <div className=\"job-list\">\r\n        {filteredJobs.length > 0 ? (\r\n          filteredJobs.map(job => (\r\n            <div key={job.id} className=\"job-card\">\r\n              <h2>{job.title}</h2>\r\n              <p><strong>Salary Offered:</strong> {job.salary}</p>\r\n              <p><strong>Job Type:</strong> {job.jobType}</p>\r\n              <p><strong>Company Name:</strong> {job.company}</p>\r\n              <p><strong>Contact:</strong> {job.contact}</p>\r\n              <button className=\"apply-button\">Apply</button>\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <p>No jobs found for \"{jobType}\"</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JobListingsPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}